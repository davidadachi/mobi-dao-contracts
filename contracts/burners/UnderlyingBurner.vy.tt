# # @version 0.2.8
# """
# @title Underlying Burner
# @notice Converts cUSD to MOBI and transfers to fee distributor
# """


# from vyper.interfaces import ERC20

# mcUSD: constant(address) = 0x64defa3544c695db8c535d289d843a189aa26b98
# cUSD: constant(address) = 0x765de816845861e75a25fca122bb6898b8b1282a
# CELO: constant(address) = 0x471ece3750da237f93b8e339c536989b8978a438
# MOBI: constant(address) = 0x73a210637f6f6b7005512677ba6b3c96bb4aa44b

# ROUTER: constant(address) = 0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121  # ubeswap

# is_approved: HashMap[address, HashMap[address, bool]]

# receiver: public(address)
# recovery: public(address)
# is_killed: public(bool)

# owner: public(address)
# emergency_owner: public(address)
# future_owner: public(address)
# future_emergency_owner: public(address)


# @external
# def __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):
#     """
#     @notice Contract constructor
#     @param _receiver Address that converted tokens are transferred to.
#                      Should be set to an `UnderlyingBurner` deployment.
#     @param _recovery Address that tokens are transferred to during an
#                      emergency token recovery.
#     @param _owner Owner address. Can kill the contract, recover tokens
#                   and modify the recovery address.
#     @param _emergency_owner Emergency owner address. Can kill the contract
#                             and recover tokens.
#     """
#     self.receiver = _receiver
#     self.recovery = _recovery
#     self.owner = _owner
#     self.emergency_owner = _emergency_owner

# @external
# def burn() -> bool:
#     """
#     @notice Receive cusd and swap it for MOBI using Ubeswap
#     @return bool success
#     """
#     assert not self.is_killed  # dev: is killed

#     # transfer coins from caller
#     amount: uint256 = ERC20(cUSD).balanceOf(msg.sender)
#     if amount != 0:
#         response: Bytes[32] = raw_call(
#             cUSD,
#             concat(
#                 method_id("transferFrom(address,address,uint256)"),
#                 convert(msg.sender, bytes32),
#                 convert(self, bytes32),
#                 convert(amount, bytes32),
#             ),
#             max_outsize=32,
#         )
#         if len(response) != 0:
#             assert convert(response, bool)

#     # get actual balance in case of transfer fee or pre-existing balance
#     amount = ERC20(cUSD).balanceOf(self)

#     # make sure the router is approved to transfer the coin
#     if not self.is_approved[ROUTER][cUSD]:
#         response: Bytes[32] = raw_call(
#             cUSD,
#             concat(
#                 method_id("approve(address,uint256)"),
#                 convert(router, bytes32),
#                 convert(MAX_UINT256, bytes32),
#             ),
#             max_outsize=32,
#         )
#         if len(response) != 0:
#             assert convert(response, bool)
#         self.is_approved[router][cUSD] = True

#     # swap for USDC on whichever of uniswap/sushi gives a better rate
#     # vyper doesn't support dynamic arrays, so we build the calldata manually
#     raw_call(
#         router,
#         concat(
#             method_id("swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"),
#             convert(amount, bytes32),           # swap amount
#             EMPTY_BYTES32,                      # min expected
#             convert(160, bytes32),              # offset pointer to path array
#             convert(self.receiver, bytes32),    # receiver of the swap
#             convert(block.timestamp, bytes32),  # swap deadline
#             convert(4, bytes32),                # path length
#             convert(cUSD, bytes32),             # cusd (input)
#             convert(mcUSD, bytes32),            # mcusd (intermediate swap)
#             convert(CELO, bytes32),             # celo (intermediate swap)
#             convert(MOBI, bytes32),             # mobi (final output)
#         )
#     )

#     return True


# @external
# def execute() -> bool:
#     """
#     @notice Transfer MOBI to the fee distributor
#     @return bool success
#     """
#     assert not self.is_killed  # dev: is killed

#     mobi_amount: uint256 = ERC20(MOBI).balanceOf(self)
#     if mobi_amount != 0:
#         ERC20(MOBI).transfer(self.receiver, mobi_amount)

#     return True


# @external
# def recover_balance(_coin: address) -> bool:
#     """
#     @notice Recover ERC20 tokens from this contract
#     @dev Tokens are sent to the recovery address
#     @param _coin Token address
#     @return bool success
#     """
#     assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner

#     amount: uint256 = ERC20(_coin).balanceOf(self)
#     response: Bytes[32] = raw_call(
#         _coin,
#         concat(
#             method_id("transfer(address,uint256)"),
#             convert(self.recovery, bytes32),
#             convert(amount, bytes32),
#         ),
#         max_outsize=32,
#     )
#     if len(response) != 0:
#         assert convert(response, bool)

#     return True


# @external
# def set_recovery(_recovery: address) -> bool:
#     """
#     @notice Set the token recovery address
#     @param _recovery Token recovery address
#     @return bool success
#     """
#     assert msg.sender == self.owner  # dev: only owner
#     self.recovery = _recovery

#     return True


# @external
# def set_killed(_is_killed: bool) -> bool:
#     """
#     @notice Set killed status for this contract
#     @dev When killed, the `burn` function cannot be called
#     @param _is_killed Killed status
#     @return bool success
#     """
#     assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner
#     self.is_killed = _is_killed

#     return True



# @external
# def commit_transfer_ownership(_future_owner: address) -> bool:
#     """
#     @notice Commit a transfer of ownership
#     @dev Must be accepted by the new owner via `accept_transfer_ownership`
#     @param _future_owner New owner address
#     @return bool success
#     """
#     assert msg.sender == self.owner  # dev: only owner
#     self.future_owner = _future_owner

#     return True


# @external
# def accept_transfer_ownership() -> bool:
#     """
#     @notice Accept a transfer of ownership
#     @return bool success
#     """
#     assert msg.sender == self.future_owner  # dev: only owner
#     self.owner = msg.sender

#     return True


# @external
# def commit_transfer_emergency_ownership(_future_owner: address) -> bool:
#     """
#     @notice Commit a transfer of ownership
#     @dev Must be accepted by the new owner via `accept_transfer_ownership`
#     @param _future_owner New owner address
#     @return bool success
#     """
#     assert msg.sender == self.emergency_owner  # dev: only owner
#     self.future_emergency_owner = _future_owner

#     return True


# @external
# def accept_transfer_emergency_ownership() -> bool:
#     """
#     @notice Accept a transfer of ownership
#     @return bool success
#     """
#     assert msg.sender == self.future_emergency_owner  # dev: only owner
#     self.emergency_owner = msg.sender

#     return True
